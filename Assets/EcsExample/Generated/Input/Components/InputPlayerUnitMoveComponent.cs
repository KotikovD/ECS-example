//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class InputEntity {

    public PlayerUnitMoveComponent playerUnitMove { get { return (PlayerUnitMoveComponent)GetComponent(InputComponentsLookup.PlayerUnitMove); } }
    public bool hasPlayerUnitMove { get { return HasComponent(InputComponentsLookup.PlayerUnitMove); } }

    public void AddPlayerUnitMove(float newHorizontal, float newVertical) {
        var index = InputComponentsLookup.PlayerUnitMove;
        var component = (PlayerUnitMoveComponent)CreateComponent(index, typeof(PlayerUnitMoveComponent));
        component.Horizontal = newHorizontal;
        component.Vertical = newVertical;
        AddComponent(index, component);
    }

    public void ReplacePlayerUnitMove(float newHorizontal, float newVertical) {
        var index = InputComponentsLookup.PlayerUnitMove;
        var component = (PlayerUnitMoveComponent)CreateComponent(index, typeof(PlayerUnitMoveComponent));
        component.Horizontal = newHorizontal;
        component.Vertical = newVertical;
        ReplaceComponent(index, component);
    }

    public void RemovePlayerUnitMove() {
        RemoveComponent(InputComponentsLookup.PlayerUnitMove);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class InputMatcher {

    static Entitas.IMatcher<InputEntity> _matcherPlayerUnitMove;

    public static Entitas.IMatcher<InputEntity> PlayerUnitMove {
        get {
            if (_matcherPlayerUnitMove == null) {
                var matcher = (Entitas.Matcher<InputEntity>)Entitas.Matcher<InputEntity>.AllOf(InputComponentsLookup.PlayerUnitMove);
                matcher.componentNames = InputComponentsLookup.componentNames;
                _matcherPlayerUnitMove = matcher;
            }

            return _matcherPlayerUnitMove;
        }
    }
}
